type command =
	| Nope 				nop
	| Move				move
	| Turn				turn <lr>
	| Pickup			pickup
	| Mark 				mark <int>
	| Unmark			unmark <int>
	| Drop				drop
	| Wait				wait <int>

type expression =
	| Do 				<command>
	| MoveElse  		moveelse {<expression+;>}
	| PickElse  		pickelse {<expression+;>}
	| IfThenElse		if (<condition>) then {<expression+;>} else {<expression+;>}
	| While				while (<condition>) do {<expression+;>}
	| Macro				macro <ident> = {<expression+;>}
	| Call				call <ident>
	| Break				break <int>

type condition =
	| Eq				= <direction> <valeur>
	| Neq				!= <direction> <valeur>
	| Random			random <int>
	| Et				et (<condition>) (<condition>)
	| Ou				ou (<condition>) (<condition>)
	| True				true

type lr =
	| TurnL				left
	| TurnR				right

type valeur = 
	| Friend			friend		
	| Foe				foe
	| FriendWithFood	friendwithfood
	| FoeWithFood		foewithfood
	| Food				food
	| Rock				rock
	| Marker			marker <int>
	| FoeMarker			foemarker
	| Home				home
	| FoeHome			foehome

type direction =
	| Here				here
	| Left				leftahead
	| Right				rightahead
	| Ahead				ahead


type program =
	| Program 		<expression+;>
